// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  relationMode      = "prisma"
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  directUrl         = env("DIRECT_URL")
}

model User {
  id        Int       @id @default(autoincrement()) @map("user_id")
  email     String    @unique @db.VarChar(50)
  username  String    @unique @db.VarChar(50)
  password  String    @db.VarChar(200)
  name      String?   @db.VarChar(50)
  avatar    String?   @db.VarChar(200)
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @default(now()) @updatedAt @map("update_at")

  refreshToken RefreshToken[]
  tweet        Tweet[]
  mediaFile    MediaFile[]

  @@map("tm_user")
}

model RefreshToken {
  id        Int       @id @default(autoincrement())
  userId    Int       @map("user_id")
  token     String    @unique @db.VarChar(200)
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @default(now()) @updatedAt @map("update_at")

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("tt_refresh_token")
}

model Tweet {
  id        Int       @id @default(autoincrement()) @map("tweet_id")
  text      String    @map("cnt") @db.VarChar
  userId    Int       @map("user_id")
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @default(now()) @updatedAt @map("update_at")
  replyToId Int?      @map("reply_to_id")

  user       User        @relation(fields: [userId], references: [id])
  replyTo    Tweet?      @relation("replies", fields: [replyToId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  replies    Tweet[]     @relation("replies")
  mediaFiles MediaFile[]

  @@index([userId])
  @@index([replyToId])
  @@map("tt_tweet")
}

model MediaFile {
  id               Int       @id @default(autoincrement()) @map("media_file_id")
  url              String    @map("url") @db.VarChar(100)
  providerPublicId String    @map("provider_public_id") @db.VarChar(100)
  createdAt        DateTime? @default(now()) @map("created_at")
  updatedAt        DateTime? @default(now()) @updatedAt @map("update_at")
  userId           Int       @map("user_id")
  tweetId          Int       @map("tweet_id")

  user  User   @relation(fields: [userId], references: [id])
  tweet Tweet? @relation(fields: [tweetId], references: [id])

  @@index([userId])
  @@index([tweetId])
  @@map("tt_media_file")
}
